{"version":3,"sources":["../node_modules/@material-ui/icons/KeyboardArrowDown.js","visitor/api/APIReference.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","useStyles","makeStyles","theme","root","marginTop","pageTitle","marginBottom","fontWeight","fontSize","snippets","padding","section","sectionTitle","snippet","snippetHeader","display","alignItems","background","grey","borderRadius","snippetTitle","color","width","snippetContent","paddingLeft","paddingRight","paddingTop","paddingBottom","fontFamily","overflow","whiteSpace","margin","copy","language","markdown","formatTitle","formatItemHeader","formatItemName","formatItemType","marginLeft","formatItemRequired","red","languages","id","title","Pricing","props","React","useState","languageAnchor","setLanguageAnchor","setLanguage","classes","handleClick","event","currentTarget","handleLanguage","useEffect","document","renderSnippetList","item","xs","lg","className","map","variant","general","onClick","endIcon","size","variants","find","source","content","renderSnippet","pages","page","Fragment","container","spacing","escapeHtml","description","renderPageStart","sections","formats","format","items","name","type","required","anchorEl","keepMounted","open","Boolean","onClose"],"mappings":"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","file":"static/js/6.458d69f4.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\"\n}), 'KeyboardArrowDown');\n\nexports.default = _default;","import React, { useEffect } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { grey, red } from \"@material-ui/core/colors\";\nimport DownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport ReactMarkdown from \"react-markdown\";\n\nimport pages from \"./content.json\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        marginTop: 80,\n    },\n    pageTitle: {\n        marginBottom: 8,\n        fontWeight: 500,\n        fontSize: 32,\n    },\n    snippets: {\n        padding: 8,\n    },\n    section: {\n        marginTop: 24,\n    },\n    sectionTitle: {\n        marginBottom: 8,\n        fontWeight: 500,\n    },\n    snippet: {\n        marginBottom: 24,\n    },\n    snippetHeader: {\n        display: \"flex\",\n        alignItems: \"center\",\n        background: grey[800],\n        padding: 12,\n        borderRadius: \"6px 6px 0px 0px\",\n    },\n    snippetTitle: {\n        color: \"white\",\n        fontSize: 14,\n        fontWeight: 500,\n        width: \"90%\",\n    },\n    snippetContent: {\n        background: grey[700],\n        color: \"white\",\n        paddingLeft: 16,\n        paddingRight: 16,\n        paddingTop: 0,\n        paddingBottom: 0,\n        fontSize: 14,\n        fontWeight: 400,\n        fontFamily: \"Courier New\",\n        borderRadius: \"0px 0px 6px 6px\",\n        overflow: \"auto\",\n        whiteSpace: \"nowrap\",\n        width: \"100%\",\n        margin: 0,\n        \"& code\": {\n            fontFamily: \"Courier Prime\",\n        },\n        \"& a\": {\n            color: \"white\",\n        },\n    },\n    copy: {\n        color: \"white\",\n    },\n    language: {\n        color: \"white\",\n        width: 130,\n        paddingLeft: 8,\n        paddingRight: 8,\n    },\n    markdown: {\n        fontSize: 16,\n        \"& code\": {\n            fontFamily: \"Courier Prime\",\n            background: grey[200],\n            fontSize: 14,\n            padding: 4,\n        },\n        \"& a\": {\n            color: \"white\",\n        },\n        \"& p\": {\n            marginTop: 0,\n            marginBottom: 16,\n        },\n    },\n    formatTitle: {\n        fontSize: 18,\n        marginBottom: 8,\n        fontWeight: 500,\n    },\n    formatItemHeader: {\n        display: \"flex\",\n    },\n    formatItemName: {\n        fontSize: 16,\n        fontWeight: 500,\n        marginTop: 8,\n        marginBottom: 4,\n        fontFamily: \"Courier Prime\",\n    },\n    formatItemType: {\n        background: grey[600],\n        color: \"white\",\n        fontSize: 12,\n        padding: \"4px 12px 0px 12px\",\n        fontWeight: 500,\n        marginTop: 8,\n        marginBottom: 4,\n        fontFamily: \"Courier Prime\",\n        borderRadius: 12,\n        marginLeft: 8,\n    },\n    formatItemRequired: {\n        background: red[500],\n        color: \"white\",\n        fontSize: 12,\n        padding: \"4px 12px 0px 12px\",\n        fontWeight: 500,\n        marginTop: 8,\n        marginBottom: 4,\n        fontFamily: \"Courier Prime\",\n        borderRadius: 12,\n        marginLeft: 8,\n    },\n}));\n\nconst languages = [\n    {\n        id: \"curl\",\n        title: \"cURL\",\n    },\n    {\n        id: \"javascript\",\n        title: \"JavaScript\",\n    },\n];\n\nfunction Pricing(props) {\n    const [languageAnchor, setLanguageAnchor] = React.useState(null);\n    const [language, setLanguage] = React.useState(languages[0]);\n    const classes = useStyles();\n\n    const handleClick = (event) => {\n        setLanguageAnchor(event.currentTarget);\n    };\n\n    const handleLanguage = (language) => () => {\n        setLanguage(language);\n        setLanguageAnchor(null);\n    };\n\n    useEffect(() => {\n        document.title = \"API Reference | Hubble Subscriptions\";\n    }, []);\n\n    const renderPageStart = (page) => (\n        <Grid container={true} className={classes.page} spacing={3}>\n            <Grid item={true} xs={12} lg={6}>\n                <Typography variant=\"h2\" className={classes.pageTitle}>\n                    {page.title}\n                </Typography>\n                <ReactMarkdown\n                    className={classes.markdown}\n                    escapeHtml={true}\n                    source={page.description}\n                />\n            </Grid>\n            {page.snippetContent && (\n                <Grid item={true} xs={12} lg={6} className={classes.snippets}>\n                    <div className={classes.snippetHeader}>\n                        <Typography\n                            variant=\"h5\"\n                            className={classes.snippetTitle}\n                        >\n                            {page.snippetTitle}\n                        </Typography>\n                        <Button size=\"small\" className={classes.copy}>\n                            Copy\n                        </Button>\n                    </div>\n                    <ReactMarkdown\n                        source={page.snippetContent}\n                        className={classes.snippetContent}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    );\n\n    const renderSnippet = (snippet) => {\n        let variant;\n        if (snippet.general) {\n            variant = snippet.variants[0];\n        } else {\n            variant = snippet.variants.find(\n                (variant) => variant.language === language.id\n            );\n        }\n\n        return (\n            <ReactMarkdown\n                source={variant ? variant.content : \"No content\"}\n                className={classes.snippetContent}\n            />\n        );\n    };\n\n    const renderSnippetList = (snippets) => {\n        return (\n            snippets && (\n                <Grid item={true} xs={12} lg={6} className={classes.snippets}>\n                    {snippets.map((snippet) => (\n                        <div className={classes.snippet}>\n                            <div className={classes.snippetHeader}>\n                                <Typography\n                                    variant=\"h5\"\n                                    className={classes.snippetTitle}\n                                >\n                                    {snippet.title}\n                                </Typography>\n                                {snippet.general || (\n                                    <Button\n                                        onClick={handleClick}\n                                        className={classes.language}\n                                        endIcon={<DownIcon />}\n                                    >\n                                        {language.title}\n                                    </Button>\n                                )}\n                                <Button size=\"small\" className={classes.copy}>\n                                    Copy\n                                </Button>\n                            </div>\n                            {renderSnippet(snippet)}\n                        </div>\n                    ))}\n                </Grid>\n            )\n        );\n    };\n\n    return (\n        <Container className={classes.root}>\n            {pages.map((page) => (\n                <React.Fragment>\n                    {renderPageStart(page)}\n                    {page.sections.map((section) => (\n                        <Grid\n                            container={true}\n                            className={classes.section}\n                            spacing={3}\n                        >\n                            <Grid item={true} xs={12} lg={6}>\n                                <Typography\n                                    variant=\"h5\"\n                                    className={classes.sectionTitle}\n                                >\n                                    {section.title}\n                                </Typography>\n                                <ReactMarkdown\n                                    className={classes.markdown}\n                                    escapeHtml={true}\n                                    source={section.content}\n                                />\n                                {section.formats &&\n                                    section.formats.map((format) => (\n                                        <React.Fragment>\n                                            <Typography\n                                                variant=\"h5\"\n                                                className={classes.formatTitle}\n                                            >\n                                                {format.title}\n                                            </Typography>\n                                            {format.description && (\n                                                <ReactMarkdown\n                                                    className={classes.markdown}\n                                                    escapeHtml={true}\n                                                    source={format.description}\n                                                />\n                                            )}\n                                            {format.items.map((item) => (\n                                                <div>\n                                                    <div\n                                                        className={\n                                                            classes.formatItemHeader\n                                                        }\n                                                    >\n                                                        <Typography\n                                                            variant=\"h6\"\n                                                            className={\n                                                                classes.formatItemName\n                                                            }\n                                                        >\n                                                            {item.name}\n                                                        </Typography>\n                                                        <Typography\n                                                            variant=\"h6\"\n                                                            className={\n                                                                classes.formatItemType\n                                                            }\n                                                        >\n                                                            {item.type}\n                                                        </Typography>\n                                                        {item.required && (\n                                                            <Typography\n                                                                variant=\"h6\"\n                                                                className={\n                                                                    classes.formatItemRequired\n                                                                }\n                                                            >\n                                                                required\n                                                            </Typography>\n                                                        )}\n                                                    </div>\n                                                    <ReactMarkdown\n                                                        className={\n                                                            classes.markdown\n                                                        }\n                                                        escapeHtml={true}\n                                                        source={\n                                                            item.description\n                                                        }\n                                                    />\n                                                </div>\n                                            ))}\n                                        </React.Fragment>\n                                    ))}\n                            </Grid>\n                            {renderSnippetList(section.snippets)}\n                        </Grid>\n                    ))}\n                </React.Fragment>\n            ))}\n            <Menu\n                anchorEl={languageAnchor}\n                keepMounted={true}\n                open={Boolean(languageAnchor)}\n                onClose={() => setLanguageAnchor(null)}\n            >\n                {languages.map((language) => (\n                    <MenuItem onClick={handleLanguage(language)}>\n                        {language.title}\n                    </MenuItem>\n                ))}\n            </Menu>\n        </Container>\n    );\n}\n\nexport default Pricing;\n"],"sourceRoot":""}